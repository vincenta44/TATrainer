{"version":3,"sources":["components/CardViewer.tsx","components/UserList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","Col","Body","Title","Text","prompt","answer","UserList","users","setUsers","items","onChange","console","log","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","getLocalStorageUsers","rawUsers","localStorage","getItem","JSON","parse","ControlPanel","setCard","reveal","deck","showAddCardModal","useState","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setPrompt","setAnswer","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","kind","App","CARDS","activeCard","setActiveCard","setAnswerRevealed","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c84cabc8.chunk.js","sourcesContent":["import { Col, Card as BootstrapCard } from 'react-bootstrap'\nimport { Card } from '../interfaces/card'\n\nexport function CardViewer({card, answerRevealed}: {card: Card, answerRevealed:boolean}): JSX.Element {\n    return <Col>\n    <BootstrapCard>\n        <BootstrapCard.Body>\n            <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\n            <BootstrapCard.Text>\n            <strong>Prompt:</strong> {card.prompt}\n            </BootstrapCard.Text>\n            {answerRevealed &&<BootstrapCard.Text>\n                <strong>Answer:</strong> {card.answer}\n            </BootstrapCard.Text>}\n        </BootstrapCard.Body>\n    </BootstrapCard>\n    </Col>\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\nimport { useState } from 'react';\n\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[])=>void}): JSX.Element {\n\n\n    function handleChange(items: Task[]): void {\n        setUsers(items);\n        console.log(items);\n    }\n\n    return <EditableDndList items={users} onChange={handleChange} />;\n}","import { Button, Col } from 'react-bootstrap';\nimport { Card } from '../interfaces/card';\nimport CARDS from '../assets/cards.json'\nimport { getRandomElement, shuffle } from '../utilities/data';\nimport { UserList } from './UserList';\nimport { useState } from 'react';\nimport { Task } from 'editable-dnd-list';\n\nexport type User = Task;\nexport const LOCAL_STORAGE_USERS = \"ta-trainer-users\";\nexport const INITIAL_USERS: User[] = [\n    {id: '1', text: \"Vincent Ains\"},\n    {id: '2', text: \"Monty\"},\n    {id: '3', text: \"Ja-Ree-Ra\"}\n]\n\nexport function getLocalStorageUsers(): User[] {\n    let rawUsers: string|null = localStorage.getItem(LOCAL_STORAGE_USERS);\n    if(rawUsers === null){\n        return [...INITIAL_USERS];\n    } else{\n        return JSON.parse(rawUsers);\n    }\n}\n\nexport function ControlPanel({setCard, reveal, answerRevealed, deck, showAddCardModal}: {setCard: (c: Card)=>void, reveal: (r: boolean) => void, answerRevealed: boolean, showAddCardModal: (b: boolean) => void, deck: Card[]}): JSX.Element {\n    \n    const [users, setUsers] = useState<User[]>(getLocalStorageUsers);\n    \n    \n    function setRandomCard() {\n        reveal(false);\n        setCard(getRandomElement(deck))\n    }\n\n    function shuffleUsers() {\n        let shuffledUsers: User[] = shuffle(users);\n        setUsers([...shuffledUsers]);\n        }\n\n    function save(){\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users))\n    }\n\n    function addNewCard(){\n        showAddCardModal(true);\n       /* const newCard: Card = {\n            id: Math.random(),\n            kind: \"Custom\",\n            prompt: window.prompt(\"What do you want the prompt to be?\") || \"NO PROMPT\",\n            answer: window.prompt(\"What should the answer be?\") || \"NO ANSWER\"\n        };\n        setDeck([...deck, newCard])*/\n    }\n\n    return <Col>\n    <h1>Control Panel</h1>\n    <UserList users={users} setUsers={setUsers}></UserList>\n    <Button onClick={setRandomCard} className=\"m-4\">Swap Current Card</Button>\n    <Button onClick={()=>reveal(!answerRevealed)} className=\"m-4\">Reveal Answer</Button>\n    <Button onClick={shuffleUsers} className=\"m-4\">Shuffle Users</Button>\n    <Button onClick={save} className=\"m-4\" variant=\"success\">Save</Button>\n    <Button onClick={addNewCard} className=\"m-4\">Add New Card</Button>\n    </Col>\n}\n","//https://stackoverflow.com/a/5915122/1218155\n\nexport function getRandomElement<T>(items: T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}\n\n// https://stackoverflow.com/a/2450976/1718155\n\n export function shuffle<T>(array: T[]): T[] {\n    let currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }","import { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { Card } from '../interfaces/card';\n\nexport function AddCardModal({visible, setVisible, addCard}: \n    {visible: boolean, setVisible: (b: boolean)=>void,\n    addCard: (c: Card) => void}): JSX.Element {\n      const [prompt, setPrompt] = useState<string>(\"PROMPT TEXT\");\n      const [answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\n  \n      function saveCard() {\n        addCard({\n          id: Math.random(),\n          kind: \"Custom\",\n          prompt, answer\n        });\n        setVisible(false);\n      }\n  \n      const hide = () => setVisible(false);\n      return (\n      <Modal show={visible} onHide={hide}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add New Card</Modal.Title>\n        </Modal.Header>\n  \n        <Modal.Body>\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\n            <Form.Label>Prompt</Form.Label>\n            <Form.Control as=\"textarea\" rows={3}\n              value={prompt}\n              onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setPrompt(ev.target.value)}/>\n          </Form.Group>\n          <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\n            <Form.Label>Suggested Answer</Form.Label>\n            <Form.Control as=\"textarea\" rows={3} \n              value={answer}\n              onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)}/>\n          </Form.Group>\n        </Form>\n        </Modal.Body>\n  \n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={hide}>Close</Button>\n          <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\n        </Modal.Footer>\n      </Modal>)\n  }","import React, { useState } from 'react';\nimport './App.css';\nimport CARDS from './assets/cards.json';\nimport { CardViewer } from './components/CardViewer';\nimport { ControlPanel } from './components/ControlPanel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap';\nimport { Card } from './interfaces/card';\nimport { AddCardModal } from './components/AddCardModal';\n\n\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as unknown as Card);\n  const [answerRevealed, setAnswerRevealed] = useState<boolean>(false);\n  const[visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Card[]>(CARDS);\n\n  function addCard(newCard: Card){\n    setDeck([...deck, newCard]);\n  }\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <ControlPanel \n        showAddCardModal={setVisible}\n        setCard={setActiveCard} \n        reveal={setAnswerRevealed}\n        deck={deck}\n        answerRevealed={answerRevealed}></ControlPanel>\n        <CardViewer card={activeCard} answerRevealed={answerRevealed}></CardViewer>\n        <AddCardModal addCard={addCard} visible={visible} setVisible={setVisible}></AddCardModal>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}